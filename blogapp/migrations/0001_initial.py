# Generated by Django 3.2.20 on 2025-05-16 14:04

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import shortuuid.django_fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=220, unique=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Event Category',
                'verbose_name_plural': 'Event Categories',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organizer_display_name', models.CharField(blank=True, help_text='Publicly displayed name of the event organizer (e.g., a company, group, or individual).', max_length=255)),
                ('featured_image', models.ImageField(blank=True, help_text='Main image for the event, displayed in listings and at the top of the event page.', null=True, upload_to='event_featured_images/')),
                ('title', models.CharField(help_text='The official title of the event.', max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the title (auto-generated).', max_length=275, unique=True)),
                ('description', ckeditor.fields.RichTextField(help_text='Detailed information about the event. Use rich text for formatting.')),
                ('start_datetime', models.DateTimeField(help_text='Date and time when the event starts.')),
                ('end_datetime', models.DateTimeField(blank=True, help_text="Date and time when the event ends (optional if it's a single point in time or all-day).", null=True)),
                ('location_name', models.CharField(help_text="Name of the venue or platform (e.g., 'Grand Ballroom', 'Online via Zoom', 'City Park').", max_length=255)),
                ('location_address', models.TextField(blank=True, help_text="Full street address if it's a physical location.", null=True)),
                ('is_online_event', models.BooleanField(default=False, help_text='Check if this is primarily an online/virtual event.')),
                ('registration_link', models.URLField(blank=True, help_text='Link to an external registration page, if any.', null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='draft', help_text='Current status of the event.', max_length=100)),
                ('featured', models.BooleanField(default=False, help_text='Check to mark this event as featured on the site.')),
                ('trending', models.BooleanField(default=False, help_text='Mark as a trending/popular event.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('views', models.PositiveIntegerField(default=0, help_text='Number of times the event page has been viewed.')),
                ('pid', shortuuid.django_fields.ShortUUIDField(alphabet='abcdefghijklmnopqrstuvwxyz0123456789', help_text='Unique short ID for the event.', length=10, max_length=25, prefix='', unique=True)),
                ('category', models.ForeignKey(blank=True, help_text='Categorize the event (e.g., Workshop, Conference, Social).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blogapp.category')),
                ('created_by_user', models.ForeignKey(blank=True, help_text='The system user who created or is managing this event entry.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_events', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Add tags to help users find the event (e.g., technology, music, free).', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['start_datetime', 'title'],
            },
        ),
        migrations.CreateModel(
            name='StaticContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_name', models.CharField(choices=[('about_us', 'About Us'), ('mission', 'Our Mission'), ('vision', 'Vision')], max_length=100, unique=True)),
                ('content', ckeditor.fields.RichTextField()),
            ],
            options={
                'verbose_name': 'Static Content Page',
                'verbose_name_plural': 'Static Content Pages',
            },
        ),
        migrations.CreateModel(
            name='EventImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Image for the event gallery.', upload_to='event_gallery_images/')),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the image.', max_length=255, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='blogapp.event')),
            ],
            options={
                'verbose_name': 'Event Gallery Image',
                'verbose_name_plural': 'Event Gallery Images',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('comment', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blogapp.event')),
            ],
            options={
                'verbose_name': 'Event Comment',
                'verbose_name_plural': 'Event Comments',
                'ordering': ['-date'],
            },
        ),
    ]
